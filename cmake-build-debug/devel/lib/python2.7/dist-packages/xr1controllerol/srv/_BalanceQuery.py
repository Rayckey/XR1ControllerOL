# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from xr1controllerol/BalanceQueryRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class BalanceQueryRequest(genpy.Message):
  _md5sum = "5f343d8e152482379fa3d057150c64e6"
  _type = "xr1controllerol/BalanceQueryRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool isQuery
"""
  __slots__ = ['isQuery']
  _slot_types = ['bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       isQuery

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(BalanceQueryRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.isQuery is None:
        self.isQuery = False
    else:
      self.isQuery = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_get_struct_B().pack(self.isQuery))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 1
      (self.isQuery,) = _get_struct_B().unpack(str[start:end])
      self.isQuery = bool(self.isQuery)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_get_struct_B().pack(self.isQuery))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 1
      (self.isQuery,) = _get_struct_B().unpack(str[start:end])
      self.isQuery = bool(self.isQuery)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from xr1controllerol/BalanceQueryResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class BalanceQueryResponse(genpy.Message):
  _md5sum = "64124d4b66b6ff17093b36c682f8a41e"
  _type = "xr1controllerol/BalanceQueryResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool inBLCMode
bool hasIdle
bool hasPassive
bool hasActive


"""
  __slots__ = ['inBLCMode','hasIdle','hasPassive','hasActive']
  _slot_types = ['bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       inBLCMode,hasIdle,hasPassive,hasActive

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(BalanceQueryResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.inBLCMode is None:
        self.inBLCMode = False
      if self.hasIdle is None:
        self.hasIdle = False
      if self.hasPassive is None:
        self.hasPassive = False
      if self.hasActive is None:
        self.hasActive = False
    else:
      self.inBLCMode = False
      self.hasIdle = False
      self.hasPassive = False
      self.hasActive = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_4B().pack(_x.inBLCMode, _x.hasIdle, _x.hasPassive, _x.hasActive))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 4
      (_x.inBLCMode, _x.hasIdle, _x.hasPassive, _x.hasActive,) = _get_struct_4B().unpack(str[start:end])
      self.inBLCMode = bool(self.inBLCMode)
      self.hasIdle = bool(self.hasIdle)
      self.hasPassive = bool(self.hasPassive)
      self.hasActive = bool(self.hasActive)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_4B().pack(_x.inBLCMode, _x.hasIdle, _x.hasPassive, _x.hasActive))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 4
      (_x.inBLCMode, _x.hasIdle, _x.hasPassive, _x.hasActive,) = _get_struct_4B().unpack(str[start:end])
      self.inBLCMode = bool(self.inBLCMode)
      self.hasIdle = bool(self.hasIdle)
      self.hasPassive = bool(self.hasPassive)
      self.hasActive = bool(self.hasActive)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4B = None
def _get_struct_4B():
    global _struct_4B
    if _struct_4B is None:
        _struct_4B = struct.Struct("<4B")
    return _struct_4B
class BalanceQuery(object):
  _type          = 'xr1controllerol/BalanceQuery'
  _md5sum = 'cd5d7de45f0cd959837e8340a01d26a2'
  _request_class  = BalanceQueryRequest
  _response_class = BalanceQueryResponse
