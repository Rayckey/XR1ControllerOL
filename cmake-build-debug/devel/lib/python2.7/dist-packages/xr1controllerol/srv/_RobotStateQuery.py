# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from xr1controllerol/RobotStateQueryRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class RobotStateQueryRequest(genpy.Message):
  _md5sum = "7b480b0ea9f565f15a42df2dd24b3a26"
  _type = "xr1controllerol/RobotStateQueryRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool isQuery
bool requestLift
"""
  __slots__ = ['isQuery','requestLift']
  _slot_types = ['bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       isQuery,requestLift

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RobotStateQueryRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.isQuery is None:
        self.isQuery = False
      if self.requestLift is None:
        self.requestLift = False
    else:
      self.isQuery = False
      self.requestLift = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2B().pack(_x.isQuery, _x.requestLift))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 2
      (_x.isQuery, _x.requestLift,) = _get_struct_2B().unpack(str[start:end])
      self.isQuery = bool(self.isQuery)
      self.requestLift = bool(self.requestLift)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2B().pack(_x.isQuery, _x.requestLift))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 2
      (_x.isQuery, _x.requestLift,) = _get_struct_2B().unpack(str[start:end])
      self.isQuery = bool(self.isQuery)
      self.requestLift = bool(self.requestLift)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2B = None
def _get_struct_2B():
    global _struct_2B
    if _struct_2B is None:
        _struct_2B = struct.Struct("<2B")
    return _struct_2B
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from xr1controllerol/RobotStateQueryResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class RobotStateQueryResponse(genpy.Message):
  _md5sum = "5794dfa17d8da414008d6fe2af401184"
  _type = "xr1controllerol/RobotStateQueryResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool isOkay
int16 RobotState
bool CollisionSwitch
int16 MainBodyMode
int16 HeadBodyMode
int16 LeftArmMode
int16 RightArmMode
int16 LeftHandMode
int16 RightHandMode



"""
  __slots__ = ['isOkay','RobotState','CollisionSwitch','MainBodyMode','HeadBodyMode','LeftArmMode','RightArmMode','LeftHandMode','RightHandMode']
  _slot_types = ['bool','int16','bool','int16','int16','int16','int16','int16','int16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       isOkay,RobotState,CollisionSwitch,MainBodyMode,HeadBodyMode,LeftArmMode,RightArmMode,LeftHandMode,RightHandMode

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RobotStateQueryResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.isOkay is None:
        self.isOkay = False
      if self.RobotState is None:
        self.RobotState = 0
      if self.CollisionSwitch is None:
        self.CollisionSwitch = False
      if self.MainBodyMode is None:
        self.MainBodyMode = 0
      if self.HeadBodyMode is None:
        self.HeadBodyMode = 0
      if self.LeftArmMode is None:
        self.LeftArmMode = 0
      if self.RightArmMode is None:
        self.RightArmMode = 0
      if self.LeftHandMode is None:
        self.LeftHandMode = 0
      if self.RightHandMode is None:
        self.RightHandMode = 0
    else:
      self.isOkay = False
      self.RobotState = 0
      self.CollisionSwitch = False
      self.MainBodyMode = 0
      self.HeadBodyMode = 0
      self.LeftArmMode = 0
      self.RightArmMode = 0
      self.LeftHandMode = 0
      self.RightHandMode = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_BhB6h().pack(_x.isOkay, _x.RobotState, _x.CollisionSwitch, _x.MainBodyMode, _x.HeadBodyMode, _x.LeftArmMode, _x.RightArmMode, _x.LeftHandMode, _x.RightHandMode))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 16
      (_x.isOkay, _x.RobotState, _x.CollisionSwitch, _x.MainBodyMode, _x.HeadBodyMode, _x.LeftArmMode, _x.RightArmMode, _x.LeftHandMode, _x.RightHandMode,) = _get_struct_BhB6h().unpack(str[start:end])
      self.isOkay = bool(self.isOkay)
      self.CollisionSwitch = bool(self.CollisionSwitch)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_BhB6h().pack(_x.isOkay, _x.RobotState, _x.CollisionSwitch, _x.MainBodyMode, _x.HeadBodyMode, _x.LeftArmMode, _x.RightArmMode, _x.LeftHandMode, _x.RightHandMode))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 16
      (_x.isOkay, _x.RobotState, _x.CollisionSwitch, _x.MainBodyMode, _x.HeadBodyMode, _x.LeftArmMode, _x.RightArmMode, _x.LeftHandMode, _x.RightHandMode,) = _get_struct_BhB6h().unpack(str[start:end])
      self.isOkay = bool(self.isOkay)
      self.CollisionSwitch = bool(self.CollisionSwitch)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_BhB6h = None
def _get_struct_BhB6h():
    global _struct_BhB6h
    if _struct_BhB6h is None:
        _struct_BhB6h = struct.Struct("<BhB6h")
    return _struct_BhB6h
class RobotStateQuery(object):
  _type          = 'xr1controllerol/RobotStateQuery'
  _md5sum = '7e1984b1a9b270399515e3ff3569d4d2'
  _request_class  = RobotStateQueryRequest
  _response_class = RobotStateQueryResponse
