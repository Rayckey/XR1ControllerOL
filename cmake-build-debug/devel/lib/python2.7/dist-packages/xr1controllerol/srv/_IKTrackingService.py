# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from xr1controllerol/IKTrackingServiceRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class IKTrackingServiceRequest(genpy.Message):
  _md5sum = "727975d5c6744c0e56b1e97bf241aa3e"
  _type = "xr1controllerol/IKTrackingServiceRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool NewTarget
int32 ControlGroup
"""
  __slots__ = ['NewTarget','ControlGroup']
  _slot_types = ['bool','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       NewTarget,ControlGroup

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(IKTrackingServiceRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.NewTarget is None:
        self.NewTarget = False
      if self.ControlGroup is None:
        self.ControlGroup = 0
    else:
      self.NewTarget = False
      self.ControlGroup = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_Bi().pack(_x.NewTarget, _x.ControlGroup))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 5
      (_x.NewTarget, _x.ControlGroup,) = _get_struct_Bi().unpack(str[start:end])
      self.NewTarget = bool(self.NewTarget)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_Bi().pack(_x.NewTarget, _x.ControlGroup))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 5
      (_x.NewTarget, _x.ControlGroup,) = _get_struct_Bi().unpack(str[start:end])
      self.NewTarget = bool(self.NewTarget)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_Bi = None
def _get_struct_Bi():
    global _struct_Bi
    if _struct_Bi is None:
        _struct_Bi = struct.Struct("<Bi")
    return _struct_Bi
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from xr1controllerol/IKTrackingServiceResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class IKTrackingServiceResponse(genpy.Message):
  _md5sum = "eb82ae550eaddbf1c13502e7df527444"
  _type = "xr1controllerol/IKTrackingServiceResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool isReachable
bool isAccepted
bool inProgress
"""
  __slots__ = ['isReachable','isAccepted','inProgress']
  _slot_types = ['bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       isReachable,isAccepted,inProgress

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(IKTrackingServiceResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.isReachable is None:
        self.isReachable = False
      if self.isAccepted is None:
        self.isAccepted = False
      if self.inProgress is None:
        self.inProgress = False
    else:
      self.isReachable = False
      self.isAccepted = False
      self.inProgress = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3B().pack(_x.isReachable, _x.isAccepted, _x.inProgress))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 3
      (_x.isReachable, _x.isAccepted, _x.inProgress,) = _get_struct_3B().unpack(str[start:end])
      self.isReachable = bool(self.isReachable)
      self.isAccepted = bool(self.isAccepted)
      self.inProgress = bool(self.inProgress)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3B().pack(_x.isReachable, _x.isAccepted, _x.inProgress))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 3
      (_x.isReachable, _x.isAccepted, _x.inProgress,) = _get_struct_3B().unpack(str[start:end])
      self.isReachable = bool(self.isReachable)
      self.isAccepted = bool(self.isAccepted)
      self.inProgress = bool(self.inProgress)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3B = None
def _get_struct_3B():
    global _struct_3B
    if _struct_3B is None:
        _struct_3B = struct.Struct("<3B")
    return _struct_3B
class IKTrackingService(object):
  _type          = 'xr1controllerol/IKTrackingService'
  _md5sum = 'c77f0c416d0a5b9b08f361d079852e35'
  _request_class  = IKTrackingServiceRequest
  _response_class = IKTrackingServiceResponse
