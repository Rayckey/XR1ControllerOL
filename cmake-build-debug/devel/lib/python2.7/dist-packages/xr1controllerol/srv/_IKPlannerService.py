# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from xr1controllerol/IKPlannerServiceRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class IKPlannerServiceRequest(genpy.Message):
  _md5sum = "1796f0f47819cc70e77aaa276cd508c5"
  _type = "xr1controllerol/IKPlannerServiceRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool NewTarget
int32 ControlGroup
int32 BaseGroup
float64 Period
int32 PlannerMethod
geometry_msgs/Transform TargetTransform
geometry_msgs/Vector3 Reference1
geometry_msgs/Vector3 Reference2
float64 TargetElbowAngle
bool Grip

================================================================================
MSG: geometry_msgs/Transform
# This represents the transform between two coordinate frames in free space.

Vector3 translation
Quaternion rotation

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w
"""
  __slots__ = ['NewTarget','ControlGroup','BaseGroup','Period','PlannerMethod','TargetTransform','Reference1','Reference2','TargetElbowAngle','Grip']
  _slot_types = ['bool','int32','int32','float64','int32','geometry_msgs/Transform','geometry_msgs/Vector3','geometry_msgs/Vector3','float64','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       NewTarget,ControlGroup,BaseGroup,Period,PlannerMethod,TargetTransform,Reference1,Reference2,TargetElbowAngle,Grip

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(IKPlannerServiceRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.NewTarget is None:
        self.NewTarget = False
      if self.ControlGroup is None:
        self.ControlGroup = 0
      if self.BaseGroup is None:
        self.BaseGroup = 0
      if self.Period is None:
        self.Period = 0.
      if self.PlannerMethod is None:
        self.PlannerMethod = 0
      if self.TargetTransform is None:
        self.TargetTransform = geometry_msgs.msg.Transform()
      if self.Reference1 is None:
        self.Reference1 = geometry_msgs.msg.Vector3()
      if self.Reference2 is None:
        self.Reference2 = geometry_msgs.msg.Vector3()
      if self.TargetElbowAngle is None:
        self.TargetElbowAngle = 0.
      if self.Grip is None:
        self.Grip = False
    else:
      self.NewTarget = False
      self.ControlGroup = 0
      self.BaseGroup = 0
      self.Period = 0.
      self.PlannerMethod = 0
      self.TargetTransform = geometry_msgs.msg.Transform()
      self.Reference1 = geometry_msgs.msg.Vector3()
      self.Reference2 = geometry_msgs.msg.Vector3()
      self.TargetElbowAngle = 0.
      self.Grip = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_B2idi14dB().pack(_x.NewTarget, _x.ControlGroup, _x.BaseGroup, _x.Period, _x.PlannerMethod, _x.TargetTransform.translation.x, _x.TargetTransform.translation.y, _x.TargetTransform.translation.z, _x.TargetTransform.rotation.x, _x.TargetTransform.rotation.y, _x.TargetTransform.rotation.z, _x.TargetTransform.rotation.w, _x.Reference1.x, _x.Reference1.y, _x.Reference1.z, _x.Reference2.x, _x.Reference2.y, _x.Reference2.z, _x.TargetElbowAngle, _x.Grip))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.TargetTransform is None:
        self.TargetTransform = geometry_msgs.msg.Transform()
      if self.Reference1 is None:
        self.Reference1 = geometry_msgs.msg.Vector3()
      if self.Reference2 is None:
        self.Reference2 = geometry_msgs.msg.Vector3()
      end = 0
      _x = self
      start = end
      end += 134
      (_x.NewTarget, _x.ControlGroup, _x.BaseGroup, _x.Period, _x.PlannerMethod, _x.TargetTransform.translation.x, _x.TargetTransform.translation.y, _x.TargetTransform.translation.z, _x.TargetTransform.rotation.x, _x.TargetTransform.rotation.y, _x.TargetTransform.rotation.z, _x.TargetTransform.rotation.w, _x.Reference1.x, _x.Reference1.y, _x.Reference1.z, _x.Reference2.x, _x.Reference2.y, _x.Reference2.z, _x.TargetElbowAngle, _x.Grip,) = _get_struct_B2idi14dB().unpack(str[start:end])
      self.NewTarget = bool(self.NewTarget)
      self.Grip = bool(self.Grip)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_B2idi14dB().pack(_x.NewTarget, _x.ControlGroup, _x.BaseGroup, _x.Period, _x.PlannerMethod, _x.TargetTransform.translation.x, _x.TargetTransform.translation.y, _x.TargetTransform.translation.z, _x.TargetTransform.rotation.x, _x.TargetTransform.rotation.y, _x.TargetTransform.rotation.z, _x.TargetTransform.rotation.w, _x.Reference1.x, _x.Reference1.y, _x.Reference1.z, _x.Reference2.x, _x.Reference2.y, _x.Reference2.z, _x.TargetElbowAngle, _x.Grip))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.TargetTransform is None:
        self.TargetTransform = geometry_msgs.msg.Transform()
      if self.Reference1 is None:
        self.Reference1 = geometry_msgs.msg.Vector3()
      if self.Reference2 is None:
        self.Reference2 = geometry_msgs.msg.Vector3()
      end = 0
      _x = self
      start = end
      end += 134
      (_x.NewTarget, _x.ControlGroup, _x.BaseGroup, _x.Period, _x.PlannerMethod, _x.TargetTransform.translation.x, _x.TargetTransform.translation.y, _x.TargetTransform.translation.z, _x.TargetTransform.rotation.x, _x.TargetTransform.rotation.y, _x.TargetTransform.rotation.z, _x.TargetTransform.rotation.w, _x.Reference1.x, _x.Reference1.y, _x.Reference1.z, _x.Reference2.x, _x.Reference2.y, _x.Reference2.z, _x.TargetElbowAngle, _x.Grip,) = _get_struct_B2idi14dB().unpack(str[start:end])
      self.NewTarget = bool(self.NewTarget)
      self.Grip = bool(self.Grip)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B2idi14dB = None
def _get_struct_B2idi14dB():
    global _struct_B2idi14dB
    if _struct_B2idi14dB is None:
        _struct_B2idi14dB = struct.Struct("<B2idi14dB")
    return _struct_B2idi14dB
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from xr1controllerol/IKPlannerServiceResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class IKPlannerServiceResponse(genpy.Message):
  _md5sum = "aafe42d2bbfb9a8bb25a5cc12975e8f6"
  _type = "xr1controllerol/IKPlannerServiceResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool inProgress
bool isReachable
bool isAccepted

"""
  __slots__ = ['inProgress','isReachable','isAccepted']
  _slot_types = ['bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       inProgress,isReachable,isAccepted

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(IKPlannerServiceResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.inProgress is None:
        self.inProgress = False
      if self.isReachable is None:
        self.isReachable = False
      if self.isAccepted is None:
        self.isAccepted = False
    else:
      self.inProgress = False
      self.isReachable = False
      self.isAccepted = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3B().pack(_x.inProgress, _x.isReachable, _x.isAccepted))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 3
      (_x.inProgress, _x.isReachable, _x.isAccepted,) = _get_struct_3B().unpack(str[start:end])
      self.inProgress = bool(self.inProgress)
      self.isReachable = bool(self.isReachable)
      self.isAccepted = bool(self.isAccepted)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3B().pack(_x.inProgress, _x.isReachable, _x.isAccepted))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 3
      (_x.inProgress, _x.isReachable, _x.isAccepted,) = _get_struct_3B().unpack(str[start:end])
      self.inProgress = bool(self.inProgress)
      self.isReachable = bool(self.isReachable)
      self.isAccepted = bool(self.isAccepted)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3B = None
def _get_struct_3B():
    global _struct_3B
    if _struct_3B is None:
        _struct_3B = struct.Struct("<3B")
    return _struct_3B
class IKPlannerService(object):
  _type          = 'xr1controllerol/IKPlannerService'
  _md5sum = '349437e0afbeedef0081b8bf7a38d1fa'
  _request_class  = IKPlannerServiceRequest
  _response_class = IKPlannerServiceResponse
