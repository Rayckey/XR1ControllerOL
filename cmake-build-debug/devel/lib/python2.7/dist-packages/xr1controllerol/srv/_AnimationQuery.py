# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from xr1controllerol/AnimationQueryRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class AnimationQueryRequest(genpy.Message):
  _md5sum = "5f343d8e152482379fa3d057150c64e6"
  _type = "xr1controllerol/AnimationQueryRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool isQuery
"""
  __slots__ = ['isQuery']
  _slot_types = ['bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       isQuery

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(AnimationQueryRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.isQuery is None:
        self.isQuery = False
    else:
      self.isQuery = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_get_struct_B().pack(self.isQuery))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 1
      (self.isQuery,) = _get_struct_B().unpack(str[start:end])
      self.isQuery = bool(self.isQuery)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_get_struct_B().pack(self.isQuery))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 1
      (self.isQuery,) = _get_struct_B().unpack(str[start:end])
      self.isQuery = bool(self.isQuery)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from xr1controllerol/AnimationQueryResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class AnimationQueryResponse(genpy.Message):
  _md5sum = "2103b70505eb43626eb30821dba4afa4"
  _type = "xr1controllerol/AnimationQueryResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool inAnimationMode
bool isPlaying
bool hasDefault
bool hasIdle
int64 AnimationType
int64 AnimationID
int64 AnimationProgress

"""
  __slots__ = ['inAnimationMode','isPlaying','hasDefault','hasIdle','AnimationType','AnimationID','AnimationProgress']
  _slot_types = ['bool','bool','bool','bool','int64','int64','int64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       inAnimationMode,isPlaying,hasDefault,hasIdle,AnimationType,AnimationID,AnimationProgress

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(AnimationQueryResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.inAnimationMode is None:
        self.inAnimationMode = False
      if self.isPlaying is None:
        self.isPlaying = False
      if self.hasDefault is None:
        self.hasDefault = False
      if self.hasIdle is None:
        self.hasIdle = False
      if self.AnimationType is None:
        self.AnimationType = 0
      if self.AnimationID is None:
        self.AnimationID = 0
      if self.AnimationProgress is None:
        self.AnimationProgress = 0
    else:
      self.inAnimationMode = False
      self.isPlaying = False
      self.hasDefault = False
      self.hasIdle = False
      self.AnimationType = 0
      self.AnimationID = 0
      self.AnimationProgress = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_4B3q().pack(_x.inAnimationMode, _x.isPlaying, _x.hasDefault, _x.hasIdle, _x.AnimationType, _x.AnimationID, _x.AnimationProgress))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 28
      (_x.inAnimationMode, _x.isPlaying, _x.hasDefault, _x.hasIdle, _x.AnimationType, _x.AnimationID, _x.AnimationProgress,) = _get_struct_4B3q().unpack(str[start:end])
      self.inAnimationMode = bool(self.inAnimationMode)
      self.isPlaying = bool(self.isPlaying)
      self.hasDefault = bool(self.hasDefault)
      self.hasIdle = bool(self.hasIdle)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_4B3q().pack(_x.inAnimationMode, _x.isPlaying, _x.hasDefault, _x.hasIdle, _x.AnimationType, _x.AnimationID, _x.AnimationProgress))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 28
      (_x.inAnimationMode, _x.isPlaying, _x.hasDefault, _x.hasIdle, _x.AnimationType, _x.AnimationID, _x.AnimationProgress,) = _get_struct_4B3q().unpack(str[start:end])
      self.inAnimationMode = bool(self.inAnimationMode)
      self.isPlaying = bool(self.isPlaying)
      self.hasDefault = bool(self.hasDefault)
      self.hasIdle = bool(self.hasIdle)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4B3q = None
def _get_struct_4B3q():
    global _struct_4B3q
    if _struct_4B3q is None:
        _struct_4B3q = struct.Struct("<4B3q")
    return _struct_4B3q
class AnimationQuery(object):
  _type          = 'xr1controllerol/AnimationQuery'
  _md5sum = '5b670fef922a4d6388f8dea2bff6ef00'
  _request_class  = AnimationQueryRequest
  _response_class = AnimationQueryResponse
