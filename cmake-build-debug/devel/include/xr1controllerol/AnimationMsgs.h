// Generated by gencpp from file xr1controllerol/AnimationMsgs.msg
// DO NOT EDIT!


#ifndef XR1CONTROLLEROL_MESSAGE_ANIMATIONMSGS_H
#define XR1CONTROLLEROL_MESSAGE_ANIMATIONMSGS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace xr1controllerol
{
template <class ContainerAllocator>
struct AnimationMsgs_
{
  typedef AnimationMsgs_<ContainerAllocator> Type;

  AnimationMsgs_()
    : AnimationType(0)
    , AnimationID(0)  {
    }
  AnimationMsgs_(const ContainerAllocator& _alloc)
    : AnimationType(0)
    , AnimationID(0)  {
  (void)_alloc;
    }



   typedef int32_t _AnimationType_type;
  _AnimationType_type AnimationType;

   typedef int32_t _AnimationID_type;
  _AnimationID_type AnimationID;





  typedef boost::shared_ptr< ::xr1controllerol::AnimationMsgs_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::xr1controllerol::AnimationMsgs_<ContainerAllocator> const> ConstPtr;

}; // struct AnimationMsgs_

typedef ::xr1controllerol::AnimationMsgs_<std::allocator<void> > AnimationMsgs;

typedef boost::shared_ptr< ::xr1controllerol::AnimationMsgs > AnimationMsgsPtr;
typedef boost::shared_ptr< ::xr1controllerol::AnimationMsgs const> AnimationMsgsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::xr1controllerol::AnimationMsgs_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::xr1controllerol::AnimationMsgs_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace xr1controllerol

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'xr1controllerol': ['/media/fcz/work/work/SRC/XR1/xr1_catkin_ws/src/xr1controllerol/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::xr1controllerol::AnimationMsgs_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::xr1controllerol::AnimationMsgs_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::xr1controllerol::AnimationMsgs_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::xr1controllerol::AnimationMsgs_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::xr1controllerol::AnimationMsgs_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::xr1controllerol::AnimationMsgs_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::xr1controllerol::AnimationMsgs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9e4a55e887ede9012b0ab385278da204";
  }

  static const char* value(const ::xr1controllerol::AnimationMsgs_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9e4a55e887ede901ULL;
  static const uint64_t static_value2 = 0x2b0ab385278da204ULL;
};

template<class ContainerAllocator>
struct DataType< ::xr1controllerol::AnimationMsgs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "xr1controllerol/AnimationMsgs";
  }

  static const char* value(const ::xr1controllerol::AnimationMsgs_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::xr1controllerol::AnimationMsgs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 AnimationType\n\
int32 AnimationID\n\
";
  }

  static const char* value(const ::xr1controllerol::AnimationMsgs_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::xr1controllerol::AnimationMsgs_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.AnimationType);
      stream.next(m.AnimationID);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AnimationMsgs_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::xr1controllerol::AnimationMsgs_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::xr1controllerol::AnimationMsgs_<ContainerAllocator>& v)
  {
    s << indent << "AnimationType: ";
    Printer<int32_t>::stream(s, indent + "  ", v.AnimationType);
    s << indent << "AnimationID: ";
    Printer<int32_t>::stream(s, indent + "  ", v.AnimationID);
  }
};

} // namespace message_operations
} // namespace ros

#endif // XR1CONTROLLEROL_MESSAGE_ANIMATIONMSGS_H
