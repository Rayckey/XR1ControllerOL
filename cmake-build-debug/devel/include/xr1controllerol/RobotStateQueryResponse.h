// Generated by gencpp from file xr1controllerol/RobotStateQueryResponse.msg
// DO NOT EDIT!


#ifndef XR1CONTROLLEROL_MESSAGE_ROBOTSTATEQUERYRESPONSE_H
#define XR1CONTROLLEROL_MESSAGE_ROBOTSTATEQUERYRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace xr1controllerol
{
template <class ContainerAllocator>
struct RobotStateQueryResponse_
{
  typedef RobotStateQueryResponse_<ContainerAllocator> Type;

  RobotStateQueryResponse_()
    : isOkay(false)
    , RobotState(0)
    , CollisionSwitch(false)
    , MainBodyMode(0)
    , HeadBodyMode(0)
    , LeftArmMode(0)
    , RightArmMode(0)
    , LeftHandMode(0)
    , RightHandMode(0)  {
    }
  RobotStateQueryResponse_(const ContainerAllocator& _alloc)
    : isOkay(false)
    , RobotState(0)
    , CollisionSwitch(false)
    , MainBodyMode(0)
    , HeadBodyMode(0)
    , LeftArmMode(0)
    , RightArmMode(0)
    , LeftHandMode(0)
    , RightHandMode(0)  {
  (void)_alloc;
    }



   typedef uint8_t _isOkay_type;
  _isOkay_type isOkay;

   typedef int16_t _RobotState_type;
  _RobotState_type RobotState;

   typedef uint8_t _CollisionSwitch_type;
  _CollisionSwitch_type CollisionSwitch;

   typedef int16_t _MainBodyMode_type;
  _MainBodyMode_type MainBodyMode;

   typedef int16_t _HeadBodyMode_type;
  _HeadBodyMode_type HeadBodyMode;

   typedef int16_t _LeftArmMode_type;
  _LeftArmMode_type LeftArmMode;

   typedef int16_t _RightArmMode_type;
  _RightArmMode_type RightArmMode;

   typedef int16_t _LeftHandMode_type;
  _LeftHandMode_type LeftHandMode;

   typedef int16_t _RightHandMode_type;
  _RightHandMode_type RightHandMode;





  typedef boost::shared_ptr< ::xr1controllerol::RobotStateQueryResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::xr1controllerol::RobotStateQueryResponse_<ContainerAllocator> const> ConstPtr;

}; // struct RobotStateQueryResponse_

typedef ::xr1controllerol::RobotStateQueryResponse_<std::allocator<void> > RobotStateQueryResponse;

typedef boost::shared_ptr< ::xr1controllerol::RobotStateQueryResponse > RobotStateQueryResponsePtr;
typedef boost::shared_ptr< ::xr1controllerol::RobotStateQueryResponse const> RobotStateQueryResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::xr1controllerol::RobotStateQueryResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::xr1controllerol::RobotStateQueryResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace xr1controllerol

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'xr1controllerol': ['/media/fcz/work/work/SRC/XR1/xr1_catkin_ws/src/xr1controllerol/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::xr1controllerol::RobotStateQueryResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::xr1controllerol::RobotStateQueryResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::xr1controllerol::RobotStateQueryResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::xr1controllerol::RobotStateQueryResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::xr1controllerol::RobotStateQueryResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::xr1controllerol::RobotStateQueryResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::xr1controllerol::RobotStateQueryResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5794dfa17d8da414008d6fe2af401184";
  }

  static const char* value(const ::xr1controllerol::RobotStateQueryResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5794dfa17d8da414ULL;
  static const uint64_t static_value2 = 0x008d6fe2af401184ULL;
};

template<class ContainerAllocator>
struct DataType< ::xr1controllerol::RobotStateQueryResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "xr1controllerol/RobotStateQueryResponse";
  }

  static const char* value(const ::xr1controllerol::RobotStateQueryResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::xr1controllerol::RobotStateQueryResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool isOkay\n\
int16 RobotState\n\
bool CollisionSwitch\n\
int16 MainBodyMode\n\
int16 HeadBodyMode\n\
int16 LeftArmMode\n\
int16 RightArmMode\n\
int16 LeftHandMode\n\
int16 RightHandMode\n\
\n\
\n\
\n\
";
  }

  static const char* value(const ::xr1controllerol::RobotStateQueryResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::xr1controllerol::RobotStateQueryResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.isOkay);
      stream.next(m.RobotState);
      stream.next(m.CollisionSwitch);
      stream.next(m.MainBodyMode);
      stream.next(m.HeadBodyMode);
      stream.next(m.LeftArmMode);
      stream.next(m.RightArmMode);
      stream.next(m.LeftHandMode);
      stream.next(m.RightHandMode);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RobotStateQueryResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::xr1controllerol::RobotStateQueryResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::xr1controllerol::RobotStateQueryResponse_<ContainerAllocator>& v)
  {
    s << indent << "isOkay: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.isOkay);
    s << indent << "RobotState: ";
    Printer<int16_t>::stream(s, indent + "  ", v.RobotState);
    s << indent << "CollisionSwitch: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.CollisionSwitch);
    s << indent << "MainBodyMode: ";
    Printer<int16_t>::stream(s, indent + "  ", v.MainBodyMode);
    s << indent << "HeadBodyMode: ";
    Printer<int16_t>::stream(s, indent + "  ", v.HeadBodyMode);
    s << indent << "LeftArmMode: ";
    Printer<int16_t>::stream(s, indent + "  ", v.LeftArmMode);
    s << indent << "RightArmMode: ";
    Printer<int16_t>::stream(s, indent + "  ", v.RightArmMode);
    s << indent << "LeftHandMode: ";
    Printer<int16_t>::stream(s, indent + "  ", v.LeftHandMode);
    s << indent << "RightHandMode: ";
    Printer<int16_t>::stream(s, indent + "  ", v.RightHandMode);
  }
};

} // namespace message_operations
} // namespace ros

#endif // XR1CONTROLLEROL_MESSAGE_ROBOTSTATEQUERYRESPONSE_H
