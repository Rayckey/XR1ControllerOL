// Generated by gencpp from file xr1controllerol/IKLinearServiceRequest.msg
// DO NOT EDIT!


#ifndef XR1CONTROLLEROL_MESSAGE_IKLINEARSERVICEREQUEST_H
#define XR1CONTROLLEROL_MESSAGE_IKLINEARSERVICEREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Transform.h>

namespace xr1controllerol
{
template <class ContainerAllocator>
struct IKLinearServiceRequest_
{
  typedef IKLinearServiceRequest_<ContainerAllocator> Type;

  IKLinearServiceRequest_()
    : NewTarget(false)
    , ControlGroup(0)
    , BaseGroup(0)
    , Period(0.0)
    , TargetTransform()
    , TargetElbowAngle(0.0)
    , Grip(false)  {
    }
  IKLinearServiceRequest_(const ContainerAllocator& _alloc)
    : NewTarget(false)
    , ControlGroup(0)
    , BaseGroup(0)
    , Period(0.0)
    , TargetTransform(_alloc)
    , TargetElbowAngle(0.0)
    , Grip(false)  {
  (void)_alloc;
    }



   typedef uint8_t _NewTarget_type;
  _NewTarget_type NewTarget;

   typedef int32_t _ControlGroup_type;
  _ControlGroup_type ControlGroup;

   typedef int32_t _BaseGroup_type;
  _BaseGroup_type BaseGroup;

   typedef double _Period_type;
  _Period_type Period;

   typedef  ::geometry_msgs::Transform_<ContainerAllocator>  _TargetTransform_type;
  _TargetTransform_type TargetTransform;

   typedef double _TargetElbowAngle_type;
  _TargetElbowAngle_type TargetElbowAngle;

   typedef uint8_t _Grip_type;
  _Grip_type Grip;





  typedef boost::shared_ptr< ::xr1controllerol::IKLinearServiceRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::xr1controllerol::IKLinearServiceRequest_<ContainerAllocator> const> ConstPtr;

}; // struct IKLinearServiceRequest_

typedef ::xr1controllerol::IKLinearServiceRequest_<std::allocator<void> > IKLinearServiceRequest;

typedef boost::shared_ptr< ::xr1controllerol::IKLinearServiceRequest > IKLinearServiceRequestPtr;
typedef boost::shared_ptr< ::xr1controllerol::IKLinearServiceRequest const> IKLinearServiceRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::xr1controllerol::IKLinearServiceRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::xr1controllerol::IKLinearServiceRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace xr1controllerol

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'xr1controllerol': ['/media/fcz/work/work/SRC/XR1/xr1_catkin_ws/src/xr1controllerol/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::xr1controllerol::IKLinearServiceRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::xr1controllerol::IKLinearServiceRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::xr1controllerol::IKLinearServiceRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::xr1controllerol::IKLinearServiceRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::xr1controllerol::IKLinearServiceRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::xr1controllerol::IKLinearServiceRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::xr1controllerol::IKLinearServiceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "54bfe6c05ff54abf03bc1d3a3df4ccb0";
  }

  static const char* value(const ::xr1controllerol::IKLinearServiceRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x54bfe6c05ff54abfULL;
  static const uint64_t static_value2 = 0x03bc1d3a3df4ccb0ULL;
};

template<class ContainerAllocator>
struct DataType< ::xr1controllerol::IKLinearServiceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "xr1controllerol/IKLinearServiceRequest";
  }

  static const char* value(const ::xr1controllerol::IKLinearServiceRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::xr1controllerol::IKLinearServiceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool NewTarget\n\
int32 ControlGroup\n\
int32 BaseGroup\n\
float64 Period\n\
geometry_msgs/Transform TargetTransform\n\
float64 TargetElbowAngle\n\
bool Grip\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Transform\n\
# This represents the transform between two coordinate frames in free space.\n\
\n\
Vector3 translation\n\
Quaternion rotation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
# It is only meant to represent a direction. Therefore, it does not\n\
# make sense to apply a translation to it (e.g., when applying a \n\
# generic rigid transformation to a Vector3, tf2 will only apply the\n\
# rotation). If you want your data to be translatable too, use the\n\
# geometry_msgs/Point message instead.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
";
  }

  static const char* value(const ::xr1controllerol::IKLinearServiceRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::xr1controllerol::IKLinearServiceRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.NewTarget);
      stream.next(m.ControlGroup);
      stream.next(m.BaseGroup);
      stream.next(m.Period);
      stream.next(m.TargetTransform);
      stream.next(m.TargetElbowAngle);
      stream.next(m.Grip);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct IKLinearServiceRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::xr1controllerol::IKLinearServiceRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::xr1controllerol::IKLinearServiceRequest_<ContainerAllocator>& v)
  {
    s << indent << "NewTarget: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.NewTarget);
    s << indent << "ControlGroup: ";
    Printer<int32_t>::stream(s, indent + "  ", v.ControlGroup);
    s << indent << "BaseGroup: ";
    Printer<int32_t>::stream(s, indent + "  ", v.BaseGroup);
    s << indent << "Period: ";
    Printer<double>::stream(s, indent + "  ", v.Period);
    s << indent << "TargetTransform: ";
    s << std::endl;
    Printer< ::geometry_msgs::Transform_<ContainerAllocator> >::stream(s, indent + "  ", v.TargetTransform);
    s << indent << "TargetElbowAngle: ";
    Printer<double>::stream(s, indent + "  ", v.TargetElbowAngle);
    s << indent << "Grip: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Grip);
  }
};

} // namespace message_operations
} // namespace ros

#endif // XR1CONTROLLEROL_MESSAGE_IKLINEARSERVICEREQUEST_H
