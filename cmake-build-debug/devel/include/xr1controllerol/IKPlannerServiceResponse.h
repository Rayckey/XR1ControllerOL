// Generated by gencpp from file xr1controllerol/IKPlannerServiceResponse.msg
// DO NOT EDIT!


#ifndef XR1CONTROLLEROL_MESSAGE_IKPLANNERSERVICERESPONSE_H
#define XR1CONTROLLEROL_MESSAGE_IKPLANNERSERVICERESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace xr1controllerol
{
template <class ContainerAllocator>
struct IKPlannerServiceResponse_
{
  typedef IKPlannerServiceResponse_<ContainerAllocator> Type;

  IKPlannerServiceResponse_()
    : inProgress(false)
    , isReachable(false)
    , isAccepted(false)  {
    }
  IKPlannerServiceResponse_(const ContainerAllocator& _alloc)
    : inProgress(false)
    , isReachable(false)
    , isAccepted(false)  {
  (void)_alloc;
    }



   typedef uint8_t _inProgress_type;
  _inProgress_type inProgress;

   typedef uint8_t _isReachable_type;
  _isReachable_type isReachable;

   typedef uint8_t _isAccepted_type;
  _isAccepted_type isAccepted;





  typedef boost::shared_ptr< ::xr1controllerol::IKPlannerServiceResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::xr1controllerol::IKPlannerServiceResponse_<ContainerAllocator> const> ConstPtr;

}; // struct IKPlannerServiceResponse_

typedef ::xr1controllerol::IKPlannerServiceResponse_<std::allocator<void> > IKPlannerServiceResponse;

typedef boost::shared_ptr< ::xr1controllerol::IKPlannerServiceResponse > IKPlannerServiceResponsePtr;
typedef boost::shared_ptr< ::xr1controllerol::IKPlannerServiceResponse const> IKPlannerServiceResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::xr1controllerol::IKPlannerServiceResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::xr1controllerol::IKPlannerServiceResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace xr1controllerol

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'xr1controllerol': ['/media/fcz/work/work/SRC/XR1/xr1_catkin_ws/src/xr1controllerol/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::xr1controllerol::IKPlannerServiceResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::xr1controllerol::IKPlannerServiceResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::xr1controllerol::IKPlannerServiceResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::xr1controllerol::IKPlannerServiceResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::xr1controllerol::IKPlannerServiceResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::xr1controllerol::IKPlannerServiceResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::xr1controllerol::IKPlannerServiceResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "aafe42d2bbfb9a8bb25a5cc12975e8f6";
  }

  static const char* value(const ::xr1controllerol::IKPlannerServiceResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xaafe42d2bbfb9a8bULL;
  static const uint64_t static_value2 = 0xb25a5cc12975e8f6ULL;
};

template<class ContainerAllocator>
struct DataType< ::xr1controllerol::IKPlannerServiceResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "xr1controllerol/IKPlannerServiceResponse";
  }

  static const char* value(const ::xr1controllerol::IKPlannerServiceResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::xr1controllerol::IKPlannerServiceResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool inProgress\n\
bool isReachable\n\
bool isAccepted\n\
\n\
";
  }

  static const char* value(const ::xr1controllerol::IKPlannerServiceResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::xr1controllerol::IKPlannerServiceResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.inProgress);
      stream.next(m.isReachable);
      stream.next(m.isAccepted);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct IKPlannerServiceResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::xr1controllerol::IKPlannerServiceResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::xr1controllerol::IKPlannerServiceResponse_<ContainerAllocator>& v)
  {
    s << indent << "inProgress: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.inProgress);
    s << indent << "isReachable: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.isReachable);
    s << indent << "isAccepted: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.isAccepted);
  }
};

} // namespace message_operations
} // namespace ros

#endif // XR1CONTROLLEROL_MESSAGE_IKPLANNERSERVICERESPONSE_H
